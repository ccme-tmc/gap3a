#!/bin/tcsh -f
# This shell script calculate the density of states (DOS) or band structures 
#  and prepare for plotting 
#  A converged self-consistent calculation is assumed done in the current directory
#
# external programs/scripts
#  x_lapw
#  kgen
#  lapw1  
#  lapw2

 
  set fullname=$0
  set bindir=$fullname:h
  set name=$fullname:t
  set logfile=:log

  # check whether WIENROOT is defined 
  if !($?WIENROOT) then 
    echo "ERROR: WIENROOT is not defined!"
    goto error
  endif 

  alias KGEN $bindir/gap2_kgen
  alias GWNVF  $bindir/gap2_gwnvf 
  alias BANDANALY $bindir/gap2_bandanaly
  setenv SCRATCH ./

  alias sb 'shift; breaksw'       #definition used in switch

  alias exec   '(x_lapw  -f $file \!:*) ; (if ($status) goto error); (echo " running " \!:*) >>$logfile;'
  alias print 'echo  \!:* | tee -a $outfile '

  set task='dos'
  set bandflag
  set so_lapw2
  set so_bandanaly 
  set soflag
  set eece 
  set orb 
  set para
  set qtlflag
  set fermi=1
  set sp=0
  set gwtag='GW'
  set kstag='_ks'
  set sotag 
  set gwopt
  set cmplxflag
  set cmplxtag 
  set para
  set nproc=1

  set start=init

  unset help
  unset band 
  unset error
  unset file
  unset gwdir
  unset gw 
  unset nkp
  unset rerun
  unset usegw
  unset so
  unset so0
  unset intct

  set full_command="$name $*" 

  while ($#argv)
    switch ($1)
    case -h:
      goto help  
    case -i:
      set intct; sb 
    case -c:
      set cmplxflag='-c'; sb 
    case -f:
      shift; set file=$1:q;  sb
    case -fermi:
      shift; set fermi=$1; sb 
    case -gw: 
      shift; set gw; set gwopt = ( $gwopt -gw $1 ) ; sb 
    case -gwdir:
      shift; set gwdir=$1; set gwopt = ( $gwopt -gwdir $1 ); sb 
    case -gwtag:
      shift; set gwtag=$1; set gwopt = ( $gwopt -gwtag $1 ) ; sb 

    case -nkp: 
      shift; set nkp=$1 
      if ($nkp == -1) then
        shift; set nkp=($nkp $1);  shift; set nkp=($nkp $1); shift; set nkp=($nkp $1)
      endif
      sb 

    case -eece:
      set eece="-eece"; sb 
    case -orb:
      set orb="-orb"; sb 

    case -p:
      shift; set para='-p'; set nproc=$1; sb

    case -qtl:
      set qtl; set qtlflag='-qtl'; sb
    case -r:
      set rerun; sb 
    case -s:
      shift; set sp=$1; sb  
    case -so:
      set so ; set sotag='so'; set soflag='-so'; sb
    case -so0:
      set so0; set so; set sotag='so'; set soflag='-so'; sb
    case -st:
      shift; set start=$1; sb 
    case -t:
    case --task:
      shift; set task=$1; sb 
    default:
      echo "Undefined option $1 !" 
      goto help ; sb
    endsw
  end
  
  # if $file not set, set default vaule of the filename to the name of the working directory
  # make some simple tests to be sure $file is correct 
  set wdir=`pwd`
  if !($?file) then
    set file=$wdir:t
  endif

  if !(-e $file.struct ) then 
    echo " ERROR: Current directory does not have $file.struct!" 
    goto error 
  endif

  set outfile=$file.outanaly-$task 

  if($?gw) then 
    set outfile=${outfile}_$gwtag 
  endif 

  echo "record output to $outfile"
  if ( !($?rerun ) && ( -e $outfile ) ) rm -f $outfile 
  echo "run $name on " `date` >> $outfile 

  print "Full command: ' $full_command '"
  print "run analysis calculation $task "

  # check complex
  # if both in1 and in1c exists
  if( ( -e $file.in1 ) && (-e $file.in1c ) ) then
    echo "  WARNING: both *.in1 and *.in1c file exists"
    if ( -z $file.in1 ) then
      echo "  WARNING: *.in1 has zero size!"
      if ( -z $file.in1c ) then
        echo "  ERROR: both in1 and in1c are empty!"
        goto error
      else
        set cmplx
      endif
    else
      if ( -z $file.in1c ) then
        echo "  WARNING: *.in1c has zero size !"
        unset cmplx
      else
        echo '  ERROR: neither *.in1 and *.in1c are empty!!'
        goto error
      endif
    endif
  else
    # If *.in1 does not exist, indicating complex calculations
    if ( -e $file.in1c ) then
      set cmplx
    else
      unset cmplx
    endif
  endif

  if($?cmplx ) then
    set cmplxflag='-c'
    set cmplxtag='c'
  else
    set cmplxflag=''
    set cmplxtag='' 
  endif

  # set spin tag 
  print ' - set spin tag '
  switch( $sp )
  case 0:
    print " -- spin unpolarized"
    set spflag
    set sptag=''; breaksw
  case 1:
    print " -- spin polarized by only considering spin up ( afm or sp_c ) "
    set spflag='-up'
    set sptag='up';  breaksw
  case 2:
    print " -- full spin polarized "
    set spflag='-up'
    set sptag='{up,dn}'; breaksw
  endsw
  print '  sptag = ' $sptag

  if($?so) then 
    set so_bandanaly="-so"
    set so_lapw2="-so"
    if( ! $?cmplx ) set so_lapw2="-c -so"
  endif 
 
# set the '-orb' flag. when spin-orbit coupling is considered, the flag '-orb' can be set on 
# either for "lapw1" or for "lapwso"
# when the '-so0' flag is present, "-orb" is on for LAPW1
# eitherwise, it is set to lapwso 
  set orb_lapw1
  set orb_so 
  if($?orb) then 
    if ( ! $?so ) then 
      set orb_lapw1='-orb'
    else 
      if ($?so0) then 
        set orb_lapw1='-orb'
        set orb_so
      else 
        set orb_lapw1
        set orb_so='-orb'
      endif 
    endif 
  endif 

  if ($task == 'band' ) then 
    set bandflag='-band' 
  endif 

#
# To avoid possible confusions, backup SCF files that might be changed  
#

  if ($?rerun) then 
    set bakup_files = ( energy$sptag qtl$sptag kgen ) 
  else 

    set lapw1_files  = ( energy$sptag vector$sptag output1$sptag scf1$sptag )
    set lapwso_files = ( energyso$sptag vectorso$sptag outputso )
    set lapw2_files  = ( qtl$sptag output2$sptag scf2$sptag )
    set kgen_files   = ( klist kgen ) 

    if ( $task == 'dos' ) then 
      set bakup_files  = ( $kgen_files $lapw1_files $lapw2_files )
    else 
      set bakup_files = ( $lapw1_files )
      if ($?qtl) then
        set bakup_files = ( $bakup_files $lapw2_files  )
      endif
    endif 

    if( $?so ) then 
      set bakup_files = ( $bakup_files $lapwso_files )  
    endif 
  endif 

  if ( "$start" == 'recover' ) goto recover  

  print ' - backup k-vectors files using in SCF'
  foreach ext  ( $bakup_files )
    if(-e $file.$ext) then 
      print "  $file.$ext ---> $file.${ext}-scf "  
      cp $file.$ext $file.${ext}-scf 
    endif 
  end 

#
# determine the starting point 
  if ($?rerun) then 
    goto tetra_spagh
  endif 

init:
  print  
  print '--- Initilization ---'
  print  
#
# Create necessary input files
#
  if ( $task == 'dos' ) then 
    # create a default int file if it does not exist 
    if !(-e $file.int) then 
      gap2_w2kset -f $file -o int 
    endif

    # if the option -nkp present, generate k-mesh  
    if ( $?nkp ) then
      KGEN -s -f $file -nkp $nkp 
      if($status) then
        echo "ERROR when running gap2_kgen"
        goto error
      endif
      print " The number of k-points for DOS" $nkp
    endif

  else 
    # prepare klist_band in the case of band calculatiob
    if !(-e $file.klist_band) then
      set tmp=`head -n 2 $file.struct | tail -n 1`
      switch ($tmp[1])
      case F:
        set lattice="fcc"
        breaksw;
      case B:
        set lattice="bcc"
        breaksw;
      case H:
        set lattice="hcp"
        breaksw;
      default:
        echo "Template klist does not exist, generate it yourself"
        goto error
        breaksw
      endsw
      cp -f $WIENROOT/SRC_templates/$lattice.klist $file.klist_band
      if($status) then
        echo "Fail to find appropriate klist_band"
        echo " -- try to use xcrysden to generate one !! "
        goto error
      endif
    endif

    # Prepare *.insp file
    # copy the template *.insp file if not existing in the current directory
    if !(-e $file.insp.temp) then
      cp -f $WIENROOT/SRC_templates/case.insp $file.insp.temp
    endif
  endif

#
# Calculate KS eigen-vectors by x lapw1  
#
lapw1:
  print 
  print '--- lapw1 ---'
  print 
  if( $nproc > 1 ) then
    if ( -e .machines ) then
      mv -f .machines .machines.old
    endif

    print "create .machines file"
    echo '# .machines for crpa_init' > .machines

    setenv USE_REMOTE 0
    set host=`hostname `
    set i=1
    while ($i <= $nproc )
      echo -n '1:' >> .machines
      @ i1 = $i + 1
      @ i2 = $i1 - 1
      echo "$host " >> .machines
      set i=$i1
    end
    echo '' >> .machines
    echo 'granularity:1' >>.machines
    echo 'extrafine:1' >>.machines
    echo 'lapw2_vector_split:1 ' >>.machines
  endif

  switch($sp) 
  case 0:
    exec $cmplxflag $para $bandflag lapw1 
    breaksw 
  case 1:
    exec -up $cmplxflag $orb_lapw1 $para $bandflag lapw1
    breaksw 

  case 2: 
    exec -up $cmplxflag $orb_lapw1 $para $bandflag lapw1
    exec -dn $cmplxflag $orb_lapw1 $para $bandflag lapw1
    breaksw
  default:
    print "ERROR: wrong option for spin"
    exit 1
    breaksw
  endsw

lapwso:
  if($?so) then 
    print '--------------------'
    print '-   lapwso         -'
    print '--------------------'

    if ($sp == 1) then 
      exec -dn $cmplxflag $orb $para $bandflag lapw1
    endif 

    if ( $sp == 0 ) then 
      exec $cmplxflag $para lapwso
    else 
      exec $cmplxflag $para -up $orb_so lapwso
    endif 
  endif 

joinvec:
  if($nproc > 1) then
    if( $sp == 0 ) then
      exec joinvec $soflag  $cmplxflag
    else if ($sp == 1) then
      exec joinvec $soflag $cmplxflag -up
    else if($sp == 2) then
      exec joinvec $soflag  $cmplxflag -up
      exec joinvec $soflag  $cmplxflag -dn
    endif
  endif

lapw2:
#
# Calculate partial charges by x lapw2
#
  if ( ( $task == 'band' && $?qtl) || $task == 'dos'  ) then 
    print 
    print '--- lapw2 for qtl ---'
    print 

    switch($sp)
    case 0:
      exec $cmplxflag -qtl $bandflag $so_lapw2 lapw2 
      breaksw
    case 1:
      cp -f $file.energyup $file.energydn
      exec $cmplxflag -qtl $bandflag $so_lapw2 -up lapw2
      breaksw
    case 2:
      exec $cmplxflag -qtl $bandflag $so_lapw2 -up lapw2
      exec $cmplxflag -qtl $bandflag $so_lapw2 -dn lapw2
      breaksw
    endsw

    if ( $task == 'dos' ) then
      print ' '
      print '------------------- Kohn-Sham Band Gap ----------------------'
      BANDANALY -f $file -fer $fermi  -s $sp $so_bandanaly | tee -a $outfile
      print ' '
    endif

  endif 

gw-lapw1:  # get GW vector and energy files
  set next=tetra_spagh
  if !($?gw) goto $next 

  GWNVF -f $file -s $sp $gwopt  
  if($status != 0 ) then 
    print "ERROR when running gap2_gwnvf" 
    print " -- skip the GW part"
    unset gw 
    goto $next 
  endif 

  foreach ext ( energy$sptag vector$sptag )
    mv -f $file.$ext $file.$ext$kstag
    mv -f $file.${ext}_$gwtag $file.$ext
  end
  if ( $sp == 1 ) then 
    cp -f $file.energyup $file.energydn
  endif 

gw-lapwso:  

  if($?so) then
    print '--------------------'
    print '-   lapwso/GW      -'
    print '--------------------'

    # make a copy of original so output files
    foreach ext ( $lapwso_files )
      mv $file.$ext $file.$ext$kstag
    end

    if ( $sp == 0 ) then
      exec $cmplxflag lapwso
    else
      exec $cmplxflag -up $orb_so lapwso
    endif
  endif

gw-lapw2:
  if ( ( $task == 'band' && $?qtl) || $task == 'dos'  ) then  
    # backup KS lapw2 files 
    foreach ext ( $lapw2_files )
      if(-e $file.$ext) mv $file.$ext $file.$ext$kstag
    end

    switch($sp)
    case 0:
      exec  $cmplxflag -qtl $so_lapw2 $bandflag lapw2   
      breaksw
    case 1:
      exec $cmplxflag -up -qtl $so_lapw2 $bandflag lapw2 
      breaksw
    case 2:
      exec $cmplxflag -up -qtl $so_lapw2 $bandflag lapw2  
      exec $cmplxflag -dn -qtl $so_lapw2 $bandflag lapw2  
      breaksw
    endsw

    if( $task == 'dos') then
      print '------------------- GW Band Gap ----------------------'
      BANDANALY -f $file -fer $fermi  -s $sp $so_bandanaly | tee -a $outfile
    endif

    foreach ext ( $lapw2_files ) 
      mv $file.$ext $file.${ext}_$gwtag
      mv $file.$ext$kstag $file.$ext
    end 
  endif # lapw2

  # copy gw-related so files 
  if($?so0) then 
    foreach ext ( $lapwso_files )
      mv $file.$ext $file.${ext}_$gwtag
      mv $file.$ext$kstag $file.$ext
    end
  endif 

  foreach ext ( energy$sptag vector$sptag)  
    mv $file.$ext $file.${ext}_$gwtag
    mv $file.$ext$kstag $file.$ext
  end  

tetra_spagh:

  if( $task == 'dos' ) then 
    print ' --- tetra ---'

    set tetra_out = ( dos{1,2,3}ev$sptag dos{1,2,3}$sptag outputt$sptag  ) 

    if( $?rerun )  then 
      mv $file.kgen-dos $file.kgen 

      foreach ext ( qtl$sptag ) 
        mv -f $file.$ext-dos  $file.$ext
        if($?gw) mv -f $file.${ext}_$gwtag-dos  $file.${ext}_$gwtag
      end
    endif 

    switch($sp)
    case 0:
      exec tetra; breaksw
    case 1:
      exec -up tetra; breaksw
    case 2:
      exec -up tetra; exec -dn tetra; breaksw
    endsw

    # get GW DOS
    if( $?gw ) then
      # backup KS tetra out 
      foreach ext ( $tetra_out ) 
        if( -e $file.$ext) mv -f $file.$ext $file.$ext$kstag
      end

      foreach ext ( qtl$sptag ) 
        mv -f $file.$ext         $file.$ext$kstag 
        mv -f $file.${ext}_$gwtag   $file.$ext 
      end

      switch($sp)
      case 0:
        exec tetra; breaksw     
      case 1:
        exec -up tetra; breaksw
      case 2:
        exec -up tetra; exec -dn tetra; breaksw
      endsw

      foreach ext ( $tetra_out ) 
        if( -e $file.$ext) then 
          mv -f $file.$ext $file.${ext}_$gwtag
          mv -f $file.$ext$kstag $file.$ext 
        endif 
      end

      foreach ext ( qtl$sptag )
        mv -f $file.$ext            $file.${ext}_$gwtag
        mv -f $file.$ext$kstag      $file.$ext
      end
    endif # gw

  else   # calculate band structure 
    print '--- spagh ---'

    # make a copy of original KS input/output files 
    if($?qtl) then
      set spagh_inp = ( energy$sotag$sptag qtl$sptag )
    else
      set spagh_inp = ( energy$sotag$sptag )
    endif
    set spagh_out = ( spaghetti${sptag}_ene spaghetti${sptag}_ps bands${sptag}.agr outputsp )

    if( $?rerun ) then 
      foreach i ( $spagh_inp ) 
        mv -f $file.$i-band $file.$i
        if($?gw) mv -f $file.${i}_$gwtag-band $file.${i}_$gwtag
      end 
    endif 
      
    # A DOS calculation has been done, then extract the Fermi energy
    # from $file.outputt which is more accurate than that one in $.scf
    if ( -e $file.qtl$sptag-dos ) then
      print "  Extract Fermi energy from DOS output"
      set efer=`grep "FERMI ENERGY=" $file.qtl${sptag}-dos | awk '{print $8}'`
    else
      print "  Extract Fermi energy from SCF output"
      set efer=`grep ":FER" $file.scf | tail -n 1 | awk '{print $NF}'`
    endif
    print "  KS Fermi Energy=" $efer

    print '------------------- KS Band Gap ----------------------'
    BANDANALY -f $file -efer $efer  -s $sp $so_bandanaly | tee -a $outfile


    awk '{ {if(NR==line) {$2=efer}}; {print $0}}' line=9 efer=$efer $file.insp.temp >$file.insp

    switch ($sp)
    case 0:
      exec  $cmplxflag $soflag $qtlflag -enefile  spaghetti ; breaksw
    case 1:
      exec  $cmplxflag $soflag $qtlflag -enefile -up spaghetti; breaksw
    case 2:
      exec  $cmplxflag $soflag $qtlflag -enefile -up spaghetti; 
      exec  $cmplxflag $soflag $qtlflag -enefile -dn spaghetti
     breaksw
    endsw

    if($?gw) then
      print 
      print '--- spagh/GW ---'
      print 
      foreach ext ( $spagh_out )
        mv $file.$ext $file.$ext$kstag
      end

      # A GW DOS calculation has been done, then extract the Fermi energy
      # from $file.qt, otherwise use the one given in the output of gwnvf 
    
      if ( -e $file.qtl${sptag}_$gwtag-dos ) then
        print "  Extract Fermi energy from " $file.qtl${sptag}_$gwtag-dos
        set efer_gw=`grep "FERMI ENERGY=" $file.qtl${sptag}_$gwtag-dos | awk '{print $8}'`
      else
        print "  Extract Fermi energy from gwnvf output "
        set efer_gw=`grep :E_FERMI_QP1 $gwdir/$file.outgw_nvf | tail -1 | awk '{print $2}' `
      endif

      print "  GW Fermi Energy =" $efer_gw
      awk '{ {if(NR==line) {$2=efer}}; {print $0}}' line=9 efer=$efer_gw $file.insp >$file.insp_$gwtag

      foreach ext ( insp $spagh_inp  )
        mv $file.$ext $file.$ext$kstag
        mv $file.${ext}_$gwtag $file.$ext
      end

      print '------------------- GW Band Gap ----------------------'
      BANDANALY -f $file -efer $efer_gw  -s $sp $so_bandanaly | tee -a $outfile

      switch ($sp)
      case 0:
        exec  $cmplxflag  $soflag $qtlflag -enefile spaghetti; breaksw
      case 1:
        exec $cmplxflag   $soflag $qtlflag -up -enefile spaghetti; breaksw
      case 2:
        exec  $cmplxflag  $soflag $qtlflag -up -enefile spaghetti
        exec  $cmplxflag  $soflag $qtlflag -dn -enefile spaghetti
        breaksw
      endsw

      foreach ext ( insp $spagh_inp )
        mv $file.$ext $file.${ext}_$gwtag
        mv $file.$ext$kstag $file.$ext
      end

      foreach ext ( $spagh_out )
        mv $file.$ext        $file.${ext}_$gwtag
        mv $file.$ext$kstag  $file.$ext
      end
    endif
  endif 

# recover backuped files 
recover:
  print 
  print '--- save new files and recover backuped SCF files  ---'
  print 
  foreach ext  ( $bakup_files )
    if ( -e $file.${ext} )  then 
      mv -f $file.${ext} $file.${ext}-$task 
      print "  $file.${ext} ---> $file.${ext}-$task"
    endif 

    if ( ($?gw) && ( -e $file.${ext}_$gwtag )) then 
      mv -f $file.${ext}_$gwtag $file.${ext}_$gwtag-$task 
      print "  $file.${ext}_$gwtag ---> $file.${ext}_$gwtag-$task"
    endif 
    if ( -e $file.${ext}-scf ) then 
      print "  $file.${ext}-scf ---> $file.${ext}"
      mv -f $file.${ext}-scf  $file.${ext}
    endif 

  end
  exit 0

error:
  print " ERROR in $name"
  exit 1

help:
  cat <<EOF 
  Usage: `basename $0` [options]
  Options:
    -c,  --complex    # complex calculation
    -fermi <0/1/2>    # option for where to extract Fermi energy 
                      #  0  -- from *.scf
                      #  1  -- from *.scf2 (default)
                      #  2  -- from *.qtl    
    -gw <gwexe>       # choose which GW executable  
    -gwdir <gwdir>    # the directory that stores the gw output 
    -gwtag <gwtag>    # use case.eqpH_$gwtag a
    -eece             # for eece calculation
    -orb              # orb calculation 
    -f <file>         # filename 
    -h                # write help and exit 
    -nkp <nkp>        # Number of kpoints needed for DOS calculations,
                        if 0 -- run kgen interactively 
                        if -1 -- followed by nkx nky nkz
    -p                # run lapw1 in the parallel mode 
    -qtl              # add band characters for the "band" plot
    -s <0/1/2>        # option for spin polarized cases
                      #  0 -- spin unpolarized 
                      #  1 -- spin polarized but only spin up is calculated (for sp_c_lapw or afm_lapw) 
                      #  2 -- spin polarized 
    -so               #  with spin-orbit coupling 
    -so0              #  ask for a perturbative SOC calculation 
    -st <start>       # start from 
    -t/--task <dos/band>  # which task  
EOF


