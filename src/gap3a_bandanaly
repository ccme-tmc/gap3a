#!/usr/bin/env python
"""bandanaly: a Python script to analyze band energes in the wien2k format 

Usage: bandanaly [options]
  Options:
    -f <case_name>   # case name
    -fn <full_name>  # full name for the energy file
    -d               # set the debug mode
    -h               # print out this information
    -efer <efer>     # Fermi energy used to set as zero, in units of Ry 
    -emax <emax>     # maximum energy in units of Ry with respect to Fermi energy
    -emin <emin>     # minimum energy in units of Ry with respect to Fermi energy
    -fer <fermi>   # option to choose where to read Fermi energy (use efer if not specified)
                     #  0  -- from case.scf 
                     #  1  -- from *.scf2 (the default) 
    -s <sp>        # sp= 0 for run_lapw, 
                     #        1 for runsp_c_lapw or runafm_lapw 
                     #        2 for runsp_lapw 
    -so            # consider spin-orbit coupling 

    -t <tag>       # the tag for the energy file 
"""
from __future__ import print_function
from gap_utils import f_Get_Natom, f_Getopt, \
                      f_Read_Efer, f_Read_Energy, f_Band_Analysis, f_Check_Name

#myname_full = sys.argv[0]
#myname = os.path.basename(myname_full)

#pylint:disable=bad-whitespace
def bandanaly():
    if f_Getopt('-h', 0, False):
        print(__doc__)
        return
    
    debug     = f_Getopt('-d'     , 0,  True )
    case_name = f_Getopt('-f'     , 1,     '')
    full_name = f_Getopt('-fn'    , 1,     '')
    efer      = f_Getopt('-efer'  , 1,  100.0)
    emax      = f_Getopt('-emax'  , 1,   1.5 )
    emin      = f_Getopt('-emin'  , 1,  -2.0 )
    fermi     = f_Getopt('-fer'   , 1,  -1   ) 
    tag       = f_Getopt('-t'     , 1,     '')
    sp        = f_Getopt('-s'     , 1,     0 ) 
    so        = f_Getopt('-so'    , 0, False ) 
    
    case_name = f_Check_Name(case_name)
    nat = f_Get_Natom(case_name)
    
    if so:
        so_tag = 'so'
    else:
        so_tag = ''
    
    # get the Fermi energy 
    if efer > 10.0 and fermi < 0:
        fermi = 0 
    if fermi >= 0: 
        efer = f_Read_Efer(case_name, fermi, sp, tag)
    
    print("Efermi=", efer)
    
    enk_all = []
    if full_name != '' :
        enk_file = full_name 
        (enk, kwt, kvec) = f_Read_Energy(enk_file, nat, debug=False)
        enk_all.append(enk) 
    
    elif sp == 0 : 
        enk_file = case_name+".energy"+so_tag+tag
        (enk, kwt, kvec) = f_Read_Energy(enk_file, nat, debug=False)
        enk_all.append(enk)
    
    elif sp == 1:
        enk_file = case_name+".energy"+so_tag+'up'+tag
        (enk, kwt, kvec) = f_Read_Energy(enk_file, nat, debug=False)
        enk_all.append(enk)
    
    elif sp == 2: 
        enk_file = case_name+".energy"+so_tag+'up'+tag
        (enk, kwt, kvec) = f_Read_Energy(enk_file, nat, debug=False)
        enk_all.append(enk)
    
        if not so: 
            enk_file = case_name+".energydn"+tag
            (enk, kwt, kvec) = f_Read_Energy(enk_file, nat, debug=False)
            enk_all.append(enk)
    
    print("Number of k-vectors=", len(kvec))
    f_Band_Analysis(enk_all, efer, kvec, emin, emax)


if __name__ == "__main__":
    bandanaly()
