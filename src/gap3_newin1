#!/usr/bin/env python
import sys,os,shutil,commands
from gap_utils import *

myname_full = sys.argv[0]
myname = os.path.basename(myname_full)
def f_Help_Info():
  print "\n  "+myname_full + ": a Python script to set a new in1 file\n"
  print '''  Info: The global linearization energy is reset in terms of 
    The Fermi energy in the existing scf file. 
    If required, some additional local orbital (LO) basis is added if possible.
  '''

  print "  Usage: " + myname + " [options]"\
  + """
  Options:  
    -f <case_name>   # case name 
    -d               # set the debug mode
    -h               # print out this information 
    -rkmax <rkmax>   # RMT*KMAX 
    -emax <emax>     # set emax 
    -es   <el_shift> # if present, the global linerization energy is set to efermi - el_shift  
    -ialo <ia_lo>    # the index of the atom to which additioal LO's are added 
                     # if zero, then add LO's to all atoms
    -lo   <0/1/2>    # option to add additional 
                     #  0 -- no additional LO
                     #  1 -- LO only for "minimal" basis 
                     #  2 -- LO also for "polarization" basis, i.e. adding LO to l up to lvmax+1 but <=3 
                     #  3 -- adding LO for l up to lvmax+2  but <= 3
    -elo  <elo>      # the energy of additional LO basis 
  """
  sys.exit(0)


if f_Getopt('-h',0,False): f_Help_Info()

debug     = f_Getopt('-d',   0, True  ) 
case_name = f_Getopt('-f',   1, ''    )
rkmax     = f_Getopt('-rkmax',  1, 0.0) 
emax      = f_Getopt('-emax',1, 0.0   ) 
iop_lo    = f_Getopt('-lo',  1, 0     ) 
elo       = f_Getopt('-elo', 1, 1.0   )  
el_shift  = f_Getopt('-es',  1, 100.0 ) 
ia_lo     = f_Getopt('-ialo',1, 0     ) 

case_name = f_Check_Name(case_name    )
cmplx     = f_Check_Complex(case_name )
natom     = f_Get_Natom(case_name) 
efer      = f_Read_Efer(case_name) 

in1     = case_name.strip()+'.in1'+cmplx 
in1_new = in1.strip()+"_new"
if os.path.isfile(in1_new) : os.remove(in1_new)

if debug:
  print "natom   =       ", natom
  print "efermi  =      ", efer
  print "in1     =   ", in1
  print "in1_new =   ", in1_new 

# determine atoms to which LO's are added 
addlo_atoms = []
for i in range(natom):
  if ia_lo == 0:
    addlo_atoms.append(1) 
  else:
    if i+1 == ia_lo:
      addlo_atoms.append(1) 
    else:
      addlo_atoms.append(0) 
 

ifile = open(in1,     'r')
ofile = open(in1_new, 'w') 

# 1st line 
line = ifile.readline()
ofile.write(line) 
  
# 2nd line
line = ifile.readline()
if rkmax == 0.0 :
  ofile.write(line)
else:
  l_data = line.split()
  lmax = int(l_data[1])
  lmaxns = int(l_data[2])
  ofile.write("%6.2f %6d %6d  (R-MT*K-MAX; MAX L IN WF, V-NMT)\n"%(rkmax,lmax,lmaxns))  

# start loop for each atom 
for iat in range(natom):
  line = ifile.readline()
  l_data = line.split()
  el_g_old = float(l_data[0])
  norb = int(l_data[1])
  iapw_g = int(l_data[2])
  if efer is None or el_shift > 10.0 :
    el_g = el_g_old
  else:
    el_g = efer - el_shift  

  lapw = []
  nl = [0,0,0,0,0]       # count the number of basis for each l

  # read information for "exceptional" LAPW basis functions 
  for i in range(norb):
    line = ifile.readline()
    l_data = line.split()
    l = int(l_data[0])
    el_old = float(l_data[1]) 
    de = float(l_data[2])
    sw = l_data[3]
    iapw = int(l_data[4])

    # reset the linerization energy if necessary 
    if el_old == el_g_old and de == 0.0:
      el = el_g 
    else:
      el = el_old 

    nl[l] += 1 
    lapw.append([l,el,de,sw,iapw])
  
  # update information for exceptional LAPW basis into new in1 file 
  #  first find lvmax -- the maximum l for occupied orbitals, 
  #    e.g. lvmax = 1 for oxygen (2p), lvmax=2 for Zn (3d) 
  lvmax=0 
  for l in range(4):  
    if nl[l] > 0: lvmax = l 
  if debug: print "lvmax=",lvmax

  lapw_new = []
  for i in range(norb):
    l=lapw[i][0]
    lapw_new.append(lapw[i]) 
    if addlo_atoms[iat] == 1 and iop_lo > 0 and nl[l] == 1 :  # adding additional LO is possible   
      lapw_new.append([l,elo,0.0,'CONT',1])

  # add additional LO's for l that is not the original in1 file 
  if addlo_atoms[iat] == 1: 
    if iop_lo > 1 and lvmax < 3 : # adding additional LO for "polarization" basis 
      lapw_new.append( [lvmax+1, el_g, 0.0, 'CONT', 1] )
      lapw_new.append( [lvmax+1, elo,  0.0, 'CONT', 1] )   
    if iop_lo > 2 and lvmax < 2 :
      lapw_new.append( [lvmax+2, el_g, 0.0, 'CONT', 1] )
      lapw_new.append( [lvmax+2, elo,  0.0, 'CONT', 1] )

  # write to new in1 file 
  norb_new = len(lapw_new) 
  ofile.write("%6.3f %5d %2d\n"%(el_g,norb_new,iapw_g))

  
  if debug:  
    print "new linearization energy configuration:\n"
    print "%6.3f %5d %2d"%(el_g,norb_new,iapw_g)

  for i in range(norb_new):
    (l,el,de,sw,iapw) = lapw_new[i]
    ofile.write("%2d%8.3f  %8.3f  %4s%2d\n"%(l,el,de,sw,iapw))

    if debug: print "%2d%8.3f  %8.3f  %4s%2d"%(l,el,de,sw,iapw)

# the last line with emax information 
line=ifile.readline()
if emax == 0.0:  
  ofile.write(line) 
else:
  iunit = int(line[20:21])
  emin  = float(line[21:31])
  ofile.write("K-VECTORS FROM UNIT:%1d%10.1f%10.1f     red   emin/emax/nband \n"%(iunit,emin,emax))

ifile.close()
ofile.close()
